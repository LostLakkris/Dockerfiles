#!/bin/bash
STAGE="cron"
REMOTE="origin"
BRANCH="master"
source .travis/_functions.sh
OPWD=$PWD

if [[ "${1}" != "before_install" ]]; then
	_log "Skipping, this script only runs during before_install."
fi

if [[ -z "$(which yq)" ]]; then
	sudo pip install yq
fi

# Prep for commit back
if [[ "${CI}" == "true" && "${TRAVIS}" == "true" ]]; then
        _log "Configuring git for commit"
        git checkout master
        git config user.email "travis@travis-ci.org"
        git config user.name "Travis CI"
        git config push.default current
        if [[ -n "${GITHUB_OAUTH_TOKEN}" ]]; then
                git remote add https-origin "https://${GITHUB_OAUTH_TOKEN}:x-oauth-basic@github.com/${TRAVIS_REPO_SLUG}" &> /dev/null
        else
                git remote add https-origin "https://github.com/${TRAVIS_REPO_SLUG}" &> /dev/null
        fi
        REMOTE="https-origin"
fi

# Check for new containers to be added to .travis.yml
TRAVIS_UPDATE="false"
_log "Checking for any missing containers."
for container in $(find * -maxdepth 1 -type f | grep '/\(cron\|script\|Dockerfile\)$' | awk -F'/' 'BEGIN{OFS="."};NF{NF-=1};1' | sort -u); do
        EXISTS=$(yq -c --arg cont "CONTAINER=${container}" '.jobs.include[]|select(.env==$cont)' .travis.yml)
        if [[ -z "${EXISTS}" ]]; then
                _log "Container ${container} detected, adding to future builds."
                yq -y --argjson new "{\"stage\":\"build\", \"env\": \"CONTAINER=${container}\"}" '.jobs.include += [$new]' .travis.yml > travis.tmp
                mv travis.tmp .travis.yml
                git add .travis.yml
                if [[ "${CI}" == "true" && "${TRAVIS}" == "true" ]]; then
                        git commit -m "travisci: Added container ${container}"
                        TRAVIS_UPDATE="true"
                fi
        fi
done

# Run each containers version script to see if a rebuild is necessary
_log "Running each container's cron script to trip changes."
for cronFile in $(find * -maxdepth 1 -type f | grep '/\(cron\)$' | awk -F'/' 'BEGIN{OFS="."};NF{NF-=1};1' | sort -u); do
        if [[ -x "${cronFile}/cron" ]]; then
                export CONTAINER=${cronFile%.*}
                _log "${CONTAINER} - Running checks for updates."
		cd ${CONTAINER}
                bash cron
		cd ${OPWD}
        fi
done
git add *

VERSION_UPDATE="false"
MESSAGE="Version Update: "
for container in $(git status -s | awk -F '[/ ]' '/LATEST/ || /VERSIONS/{print $(NF-1)}' | sort -u); do
        c_ver=$(tail -n 1 ${container}/VERSIONS)
        MESSAGE+="${container}(${c_ver}),"
        _log "${container} - New Version ${c_ver}"
        if [[ "${VERSION_UPDATE}" == "false" ]]; then
                VERSION_UPDATE="true"
        fi
done

# Commit back the changes
if [[ "${CI}" == "true" && "${TRAVIS}" == "true" ]]; then
        if [[ "${VERSION_UPDATE}" == "true" ]]; then
                git commit -m "${MESSAGE::-1}"
        fi
        if [[ "${TRAVIS_UPDATE}" == "true" || "${VERSION_UPDATE}" == "true" ]]; then
                _log "Pushing changes back to master branch."
                git push --quiet -u "${REMOTE}" "${BRANCH}"
        fi
fi
