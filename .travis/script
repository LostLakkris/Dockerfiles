#!/bin/bash
STAGE="script"
source .travis/_functions.sh
docker login -u "${DOCKER_USERNAME}" -p "${DOCKER_PASSWORD}" &> /dev/null
OPWD=$PWD

CONTAINERS=()
if [[ -n "${CONTAINER}" ]]; then
	CONTAINERS+=("${CONTAINER}")
else
	CONTAINERS+=( $(yq -c --raw-output '.jobs.include[]|select(.stage=="build").env' .travis.yml | sed 's@CONTAINER=@@g') )
fi

# Create buildx environment
_log "Create and use buildx context"
docker buildx create --name "${DOCKER_ORG}"
docker buildx use "${DOCKER_ORG}"
docker buildx inspect --bootstrap
docker buildx ls

for CONTAINER in ${CONTAINERS[@]}; do
	if [[ ! -d "${CONTAINER}" ]]; then
		_log "Container folder does not exist, this is an odd error"
		continue
	fi
	cd ${CONTAINER}
	if [[ -e "script" ]]; then
		export CONTAINER=${CONTAINER}
		bash script
		unset CONTAINER
		continue
	fi
	if [[ ! -e "Dockerfile" ]]; then
		_log "Container does not seme to have Dockerfile."
		continue
	fi


	DOCKER_ARGS=( "buildx" "build" "--push" )

	# Check what's already at docker hub
	_log "Inspect whats already been published to the hub"
	docker manifest inspect "${DOCKER_ORG}/${CONTAINER}"
	docker buildx imagetools inspect "${DOCKER_ORG}/${CONTAINER}"

	# Get parent image's supported arch
	_log "Using 'docker buildx' to construct the multi-arch images."
	PLATFORMS=""
	if [[ -e "buildx.platforms" ]]; then
		PLATFORMS=$(cat "buildx.platforms")
	else
		FROM=$(awk '/^FROM/{print $NF}' Dockerfile | tail -n 1)
		for PLAT in $(docker manifest inspect "${FROM}" | jq -c --raw-output '.manifests[].platform'); do
	                PLAT_OS=$(echo "${PLAT}" | jq -c --raw-output '.os')
	                PLAT_ARCH=$(echo "${PLAT}" | jq -c --raw-output '.architecture')
	                PLAT_VARIANT=$(echo "${PLAT}" | jq -c --raw-output '.variant')
			_log "Detected: ${PLAT_OS} / ${PLAT_ARCH}"
	                if [[ -n "${PLATFORMS}" ]]; then
	                        PLATFORMS+=","
	                fi
	                PLATFORMS+="${PLAT_OS}/${PLAT_ARCH}"
	                if [[ -n "${PLAT_VARIANT}" && "${PLAT_VARIANT}" != "null" ]]; then
	                        PLATFORMS+="/${PLAT_VARIANT}"
	                fi
		done
	fi
	if [[ -z "${PLATFORMS}" ]]; then
        	PLATFORMS="linux/amd64"
	fi
	_log "Platform string used: '${PLATFORMS}'"
	DOCKER_ARGS+=( "--platform" "${PLATFORMS}" )

	# Determine tags
	TAG_STYLE="latest"
	if [[ -e "VERSIONS" && -e "LATEST" ]]; then
		TAG_STYLE="version"
	fi

	DOCKER_TAGS=()
	case ${TAG_STYLE} in
	        "latest")
	                _log "Container is only configured to build latest, not tagged versions"
	                DOCKER_TAGS+=( "-t" "${DOCKER_ORG}/${CONTAINER}:latest" )
	                _log "Queing tag ${DOCKER_ORG}/${CONTAINER}:latest"
	                DOCKER_ARGS+=( "--build-arg" "RELEASE=latest" )
	                ;;
	        "version")
	                _log "Using any version data to calculate appropriate tags"
	                LATEST_VERSION=""
	                THIS_VERSION=""
	                if [[ -e "LATEST" && -e "VERSIONS" ]]; then
	                        LATEST_VERSION=$(cat "LATEST")
	                        THIS_VERSION=$(tail -n1 "VERSIONS")
	                        DOCKER_TAGS+=( "-t" "${DOCKER_ORG}/${CONTAINER}:${THIS_VERSION}" )
	                        _log "Queing tag ${DOCKER_ORG}/${CONTAINER}:${THIS_VERSION}"
	                        SUBTAG=${THIS_VERSION}
	                        while [[ -n "${SUBTAG//[^.-]}" ]]; do
	                                LATEST_MATCH=$(awk "/${SUBTAG%.**}/ {a=\$0} END{print a}" "VERSIONS")
	                                if [[ "${LATEST_MATCH}" == "${THIS_VERSION}" ]]; then
	                                        DOCKER_TAGS+=( "-t" "${DOCKER_ORG}/${CONTAINER}:${SUBTAG%.**}" )
	                                        _log "Queing tag ${DOCKER_ORG}/${CONTAINER}:${SUBTAG%.**}"
	                                fi
	                                SUBTAG=$(echo "${SUBTAG}" | awk -F'[.-]' '{gsub("[.-]"$NF,"");print}')
	                        done
	                fi
	
	                if [[ -n "${LATEST_VERSION}" && -n "${THIS_VERSION}" && "${LATEST_VERSION}" == "${THIS_VERSION}" ]]; then
	                        DOCKER_TAGS+=( "-t" "${DOCKER_ORG}/${CONTAINER}:latest" )
	                        _log "Queing tag ${DOCKER_ORG}/${CONTAINER}:latest"
	                else
	                        DOCKER_TAGS+=( "-t" "${DOCKER_ORG}/${CONTAINER}:debug" )
	                        _log "Queing tag ${DOCKER_ORG}/${CONTAINER}:debug"
	                fi
	                if [[ -n "${THIS_VERSION}" ]]; then
	                        DOCKER_ARGS+=( "--build-arg" "RELEASE=${THIS_VERSION}" )
	                fi
	                ;;
	esac
	DOCKER_ARGS+=( ${DOCKER_TAGS[@]} )

	# Build and Push
	_log "Starting build+push of '${DOCKER_ORG}/${CONTAINER}'"
	DOCKER_ARGS+=( "-f" "Dockerfile" "." )
	docker ${DOCKER_ARGS[@]}
	OUTCOME=$?
	if [[ ${OUTCOME} -ne 0 ]]; then
		exit ${OUTCOME}
	fi
	cd ${OPWD}
done
